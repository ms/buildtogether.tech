---
layout: post
author: Greg Wilson
title: "A Multi-Site Joint Replication of a Design Patterns Experiment Using Moderator Variables to Generalize Across Contexts"
date: 2016-09-09
categories: ["Replication", "Design Patterns"]
---

<p>
  Jonathan L. Krein, Lutz Prechelt, Natalia Juristo, Aziz Nanthaamornphong, Jeffrey C. Carver, Sira Vegas, Charles D. Knutson, Kevin D. Seppi, and Dennis L. Eggett:
  "<a href="http://sequoia.cs.byu.edu/lab/files/pubs/Krein2016a.pdf">A Multi-Site Joint Replication of a Design Patterns Experiment Using Moderator Variables to Generalize Across Contexts</a>".
  <em>IEEE Trans. Software Engineering</em>,
  42(4), April 2016,
  10.1109/TSE.2015.2488625.
</p>
<blockquote>
  <em>
    <strong>Context.</strong>  Several empirical studies have explored
    the benefits of software design patterns, but their collective
    results are highly inconsistent. Resolving the inconsistencies
    requires investigating moderators—i.e., variables that cause an
    effect to differ across contexts.
    <strong>Objectives.</strong>  Replicate a design patterns
    experiment at multiple sites and identify sufficient moderators to
    generalize the results across prior studies.
    <strong>Methods.</strong>  We perform a close replication of an
    experiment investigating the impact (in terms of time and quality)
    of design patterns (Decorator and Abstract Factory) on software
    maintenance. The experiment was replicated once previously, with
    divergent results. We execute our replication at four
    universities—spanning two continents and three countries—using a
    new method for performing distributed replications based on
    closely coordinated, small-scale instances ("joint
    replication"). We perform two analyses: 1) a post-hoc analysis of
    moderators, based on frequentist and Bayesian statistics; 2) an a
    priori analysis of the original hypotheses, based on frequentist
    statistics.
    <strong>Results.</strong>  The main effect differs across the
    previous instances of the experiment and across the sites in our
    distributed replication. Our analysis of moderators (including
    developer experience and pattern knowledge) resolves the
    differences sufficiently to allow for cross-context (and
    cross-study) conclusions. The final conclusions represent 126
    participants from five universities and 12 software companies,
    spanning two continents and at least four countries.
    <strong>Conclusions.</strong>  The Decorator pattern is found to
    be preferable to a simpler solution during maintenance, as long as
    the developer has at least some prior knowledge of the
    pattern. For Abstract Factory, the simpler solution is found to be
    mostly equivalent to the pattern solution. Abstract Factory is
    shown to require a higher level of knowledge and/or experience
    than Decorator for the pattern to be beneficial.
  </em>
</blockquote>
<p>
  This paper's conclusions about the efficacy of two particular design
  patterns are less important than its demonstration that claims about
  software design can be tested rigorously through carefully-designed
  studies.  The experimental and statistical methods used would be
  immediately familiar to anyone working in public health, and the
  claims are carefully circumscribed.  The end result is less rousing
  than the rhetoric found in many popular books, but I believe that's
  a sign of our field's increasing maturity.
</p>
