---
layout: post
author: Jorge Aranda
title: "The social dynamics of pair programming"
date: 2011-07-11
time: 15:05:53
categories: ["Pair Programming", "Qualitative Studies"]
---
<p><em>Jan Chong and Tom Hurlbutt, "<strong><a href="http://www.google.com/url?sa=t&amp;source=web&amp;cd=1&amp;ved=0CB0QFjAA&amp;url=http%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fdownload%3Fdoi%3D10.1.1.87.1533%26rep%3Drep1%26type%3Dpdf&amp;rct=j&amp;q=the%20social%20dynamics%20of%20pair%20programming&amp;ei=a24bTtHQOKnUiAKO4NDSBQ&amp;usg=AFQjCNELrxgJ2ufweGy570BFktmXYU4Cew&amp;sig2=dUBk-znGe2jTobTgsQ4UCg&amp;cad=rja">The Social Dynamics of Pair Programming</a></strong>". ICSE 2007.</em></p>
<blockquote><em>This paper presents data from a four month ethnographic study of professional pair programmers from two software development teams. Contrary to the current conception of pair programmers, the pairs in this study did not hew to the separate roles of "driver " and "navigator". Instead, the observed programmers moved together through different phases of the task, considering and discussing issues at the same strategic "range" or level of abstraction and in largely the same role. This form of interaction was reinforced by frequent switches in keyboard control during pairing and the use of dual keyboards. The distribution of expertise among the members of a pair had a strong influence on the tenor of pair programming interaction. Keyboard control had a consistent secondary effect on decision-making within the pair. These findings have implications for software development managers and practitioners as well as for the design of software development tools.</em></blockquote>
<p>The myth of the driver/navigator split in pair programming is very pervasive: I've found it in almost all descriptions of pair programming I've seen, and in the language that programming pairs use to refer to the work that they do. However, Chong and Hurlbutt report that, effectively, programming pairs perform the same mixed role throughout their collaboration. They also have some interesting observations on the effect of keyboard control and expertise differentials within the pair.</p>
<p>Their suggested implications for pair programming (discussed in Section 6):</p>
<ul>
	<li><strong>Move beyond the "driver" and the "navigator".</strong> This artificial role distinction only muddles the learning process of a new practice.</li>
	<li><strong>Help programmers stay focused and engaged.</strong> The authors suggest this can be achieved with good hardware support (hardware that supports, for instance, fast keyboard switching between pairs).</li>
	<li><strong>Consider differentials in programmer knowledge.</strong> Too great a difference is not productive.</li>
	<li><strong>Avoid pair rotation late in a task.</strong> Re-pair based on task completion, not on day cycles.</li>
</ul>
<p>The latter two suggestions seem commonplace in the firms that I've observed that do some pair programming, but I've found that the former two still need wider dissemination. What is your experience?</p>
